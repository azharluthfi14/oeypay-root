import { ChangeEvent, useState, useRef } from "react";

export default function App() {
  const monthRef = useRef<HTMLInputElement>(null);
  const yearRef = useRef<HTMLInputElement>(null);
  const cvcRef = useRef<HTMLInputElement>(null);

  const [isCardValid, setIsCardValid] = useState(true);
  const [cardNumber, setCardNumber] = useState("");
  const [expMonth, setExpMonth] = useState("");
  const [expYear, setExpYear] = useState("");
  const [cvc, setCvc] = useState("");
  console.log("isCardValid", isCardValid);
  const getCardType = (inputText: string) => {
    const sanitizedInput = inputText.replace(/\D/g, "");

    if (/^4/.test(sanitizedInput)) {
      return "visa";
    } else if (/^5/.test(sanitizedInput)) {
      return "mastercard";
    } else if (/^3[47]/.test(sanitizedInput)) {
      return "amex";
    } else {
      return "unknown";
    }
  };

  const validateCardNumber = (inputText: string) => {
    const sanitizedInput = inputText.replace(/\D/g, "");
    const cardType = getCardType(sanitizedInput);
    let sum = 0;
    let shouldDouble = false;

    for (let i = sanitizedInput.length - 1; i >= 0; i--) {
      let digit = parseInt(sanitizedInput.charAt(i), 10);

      if (shouldDouble) {
        digit *= 2;
        if (digit > 9) {
          digit -= 9;
        }
      }

      sum += digit;
      shouldDouble = !shouldDouble;
    }

    const isValidLuhn = sum % 10 === 0;

    let isValidCard = false;

    // Check additional rules for specific card types
    switch (cardType) {
      case "visa":
        isValidCard = sanitizedInput.length === 16 && isValidLuhn;
        break;
      case "mastercard":
        isValidCard = sanitizedInput.length === 16 && isValidLuhn;
        break;
      case "amex":
        isValidCard = sanitizedInput.length === 15 && isValidLuhn;
        break;
      default:
        isValidCard = false;
    }

    setIsCardValid(isValidCard);
    return isValidCard;
  };

  const handleCardNumberChange = (event: ChangeEvent<HTMLInputElement>) => {
    let inputNumber = event.target.value.replace(/\D/g, "");
    let formattedNumber = "";

    if (inputNumber.length > 19) {
      // Limit the input to 2 characters for month
      inputNumber = inputNumber.substring(0, 19);
    }

    // Menentukan jenis kartu berdasarkan awalan angka
    let cardType = "unknown";
    if (/^4/.test(inputNumber)) {
      cardType = "visa";
    } else if (/^5[1-5]/.test(inputNumber)) {
      cardType = "mastercard";
    } else if (/^3[47]/.test(inputNumber)) {
      cardType = "amex";
    }

    // Format sesuai jenis kartu
    if (cardType === "visa") {
      formattedNumber = inputNumber.replace(/(\d{4})/g, "$1 ");
    } else if (cardType === "amex") {
      formattedNumber = inputNumber.replace(
        /(\d{4})(\d{6})(\d{5})/,
        "$1 $2 $3"
      );
    } else {
      // Format untuk jenis kartu lainnya (misalnya, Mastercard)
      formattedNumber = inputNumber.replace(/(\d{4})/g, "$1 ");
    }

    // Menampilkan ikon kartu kredit
    // setCardType(cardType);

    setCardNumber(formattedNumber);
    validateCardNumber(formattedNumber);

    const isValidCard = validateCardNumber(formattedNumber);
    if (isValidCard || event.target.value.length < inputNumber.length) {
      if (monthRef.current) {
        monthRef.current.focus();
      }
    }
  };

  const handleExpMonthChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    let inputText = e.target.value.replace(/\D/g, ""); // Remove non-numeric characters

    if (inputText.length > 2) {
      // Limit the input to 2 characters for month
      inputText = inputText.substring(0, 2);
    }

    setExpMonth(inputText);

    if (inputText.length === 2 && parseInt(inputText, 10) <= 12) {
      // If the month input is valid, focus on the year input
      if (yearRef.current) {
        yearRef.current.focus(); // Explicitly set focus on the year input
      }
    }
  };

  const handleExpYearChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    let inputText = e.target.value.replace(/\D/g, ""); // Remove non-numeric characters

    if (inputText.length > 2) {
      // Limit the input to 2 characters for month
      inputText = inputText.substring(0, 2);
    }

    setExpYear(inputText);

    if (inputText.length === 2 && parseInt(inputText, 10) > 12) {
      // If the month input is valid, focus on the year input
      if (cvcRef.current) {
        cvcRef.current.focus(); // Explicitly set focus on the year input
      }
    }
  };

  const handleCVCChange = (event: ChangeEvent<HTMLInputElement>) => {
    let inputNumber = event.target.value.replace(/\D/g, "");
    if (inputNumber.length > 4) {
      // Limit the input to 4 characters
      inputNumber = inputNumber.substring(0, 4);
    }
    setCvc(inputNumber);
  };

  return (
    <div className="flex items-center justify-center h-screen">
      <div className="space-y-4 mx-10">
        <div className="space-y-2">
          <label htmlFor="cardNumber" className="block font-medium">
            Card Number
          </label>
          <input
            type="text"
            name="cardNumber"
            onChange={handleCardNumberChange}
            value={cardNumber}
            id="cardNumber"
            placeholder="XXXX XXXX XXXX XXXX"
            className={`mt-1 p-2 border rounded-md w-full`}
          />
        </div>
        <div className="grid gap-3 grid-cols-2 place-content-center">
          <div className="flex gap-3 items-center">
            <div className="space-y-2">
              <label htmlFor="expMonth" className="block font-medium">
                Exp. Month
              </label>
              <input
                type="text"
                name="expMonth"
                ref={monthRef}
                id="expMonth"
                value={expMonth}
                onChange={handleExpMonthChange}
                placeholder="MM"
                className={`mt-1 p-2 border rounded-md w-full`}
              />
            </div>
            <div className="space-y-2">
              <label htmlFor="expYear" className="block font-medium">
                Exp. Year
              </label>
              <input
                type="text"
                name="expYear"
                ref={yearRef}
                onChange={handleExpYearChange}
                value={expYear}
                id="expYear"
                placeholder="YY"
                className={`mt-1 p-2 border rounded-md w-full`}
              />
            </div>
          </div>
          <div className="space-y-2">
            <label htmlFor="cvc" className="block font-medium">
              CVC
            </label>
            <input
              className={`mt-1 p-2 border rounded-md w-full`}
              type="text"
              ref={cvcRef}
              name="cvc"
              id="cvc"
              value={cvc}
              onChange={handleCVCChange}
              placeholder="CVC"
            />
          </div>
        </div>
      </div>
    </div>
  );
}
